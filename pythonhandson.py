# -*- coding: utf-8 -*-
"""PythonHandsOn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S3ONX-FeFiTmGz4mlj6yH2-7xSzNjfLz

1.Write a Python program to count the number of characters in a string.,
,Sample String : 'google.com'
,"Expected Result : {'o': 3, 'g': 2, '.': 1, 'e': 1, 'l': 1, 'm': 1, 'c': 1}"
"""

str = "google.com"

dict = {}
for n in str:
  keys = dict.keys()
  if n in keys:
    dict[n] += 1
  else:
    dict[n] = 1
print(dict)

"""2. Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.,
,"Sample List : ['abc', 'xyz', 'aba', '1221']"
"""

list = ['abc', 'xyz', 'aba', '1221']
count = 0
for n in list:
  if len(n) >= 2 and n[0] == n[-1]:
    count += 1
print(count)

"""3. Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string. If the string length is less than 2, return instead the empty string

"""

def string_ends(str):
  if len(str)<2:
    return ""
  return str[:2]+str[-2:]

print(string_ends('w3resource'))
print(string_ends('w3'))
print(string_ends('w'))

"""4 .Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. Go to the editor",
,"Sample List : [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]"
,"Expected Result : [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]"
"""

def sort_list_last(tuples):
  return sorted(tuples, key=lambda x: x[-1])

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))

"""5. Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string is already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged

"""

def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1

# prompt: 6. Create a list comprehension that generates a list of squares of numbers from 1 to 20.,

squares = [x**2 for x in range(1,21)]
squares

#7. Given a list of integers, find the largest and smallest numbers in the list without using the built-in max() and min() functions."

def find_largest_smallest(numbers):
    if not numbers:
        return None, None  # Handle empty list case

    largest = numbers[0]
    smallest = numbers[0]

    for n in numbers:
        if n > largest:
            largest = n
        elif n < smallest:
            smallest = n

    return largest, smallest

# Example usage
numbers = [-3, -1, 4, 1, 5, 9, 2, 6]
largest, smallest = find_largest_smallest(numbers)
print(f"Largest: {largest}, Smallest: {smallest}")

# 8. Write a function that takes two lists and returns a set of elements that are common to both lists.,

def common_elements(list1, list2):
  """
  This function takes two lists and returns a set of elements that are common to both lists.
  """
  return set(list1) & set(list2)

common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])

# 9. Given a list of words, return a set of words that appear more than once in the list.

def find_duplicate_words(word_list):

    word_counts = {}
    duplicates = set()

    for word in word_list:
        if word in word_counts:
            word_counts[word] += 1
            duplicates.add(word)
        else:
            word_counts[word] = 1

    return duplicates

find_duplicate_words(["apple", "banana", "cherry", "banana", "date", "apple"])

# 10. Given two sets, write a function to return their union, intersection, and difference.

def set_operations(set1, set2):
  """
  This function takes two sets and returns their union, intersection, and difference.
  """
  union_set = set1.union(set2)
  intersection_set = set1.intersection(set2)
  difference_set = set1.difference(set2)
  return union_set, intersection_set, difference_set

# Example usage
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}
union, intersection, difference = set_operations(set1, set2)
print(f"Union: {union}")
print(f"Intersection: {intersection}")
print(f"Difference (set1 - set2): {difference}")

# 11. Given a list of tuples where each tuple contains a name and a score (e.g., [('Alice', 90), ('Bob', 85), ('Alice', 95)]), write a function to return a dictionary where each name maps to the sum of their scores.

def sum_scores(scores):
  """
  This function takes a list of tuples (name, score) and returns a dictionary
  mapping each name to the sum of their scores.
  """
  name_scores = {}
  for name, score in scores:
    name_scores[name] = name_scores.get(name, 0) + score
  return name_scores

# Example usage
scores = [('Alice', 90), ('Bob', 85), ('Alice', 95)]
result = sum_scores(scores)
print(result)  # Output: {'Alice': 185, 'Bob': 85}

# 12. Create a dictionary comprehension that maps each word in a list to its length.

words = ["apple", "banana", "cherry"]
word_lengths = {word: len(word) for word in words}
word_lengths

# 13. Write a function that takes a tuple of numbers and returns a new tuple with each element doubled,

def double_tuple(numbers):
    return tuple(x * 2 for x in numbers)

double_tuple((0, 1, -2, -3, 4, 5))

# 14. Write a function that swaps the first and last elements of a tuple.,

def swap_first_last(input_tuple):
    if len(input_tuple) < 2:
        return input_tuple
    else:
        return input_tuple[-1:] + input_tuple[1:-1] + input_tuple[:1]

swap_first_last((1, 2, 3, 4, 5))

# 15. Write a function that takes two tuples and returns a new tuple that contains all elements from both tuples without any duplicates.,

def combine_tuples(tuple1, tuple2):
    return tuple(set(tuple1 + tuple2))

combine_tuples((1, 2, 3), (3, 4, 5))

# 16. Write a program to find the factorial of a number using a while loop.,

def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers"
    elif n == 0:
        return 1
    else:
        fact = 1
        i = 1
        while i <= n:
            fact *= i
            i += 1
        return fact

# Example usage
number = 5
result = factorial(number)
print(f"The factorial of {number} is {result}")

# 17. Write a program that finds the sum of all even numbers from 1 to 100 using a for loop.
sum_of_evens = 0
for i in range(2, 101, 2):
    sum_of_evens += i
print(f"The sum of all even numbers from 1 to 100 is: {sum_of_evens}")

# 18. Write a program to count the number of vowels in a string using membership operators (in),

def count_vowels(input_string):
    vowels = "aeiouAEIOU"
    vowel_count = 0
    for char in input_string:
        if char in vowels:
            vowel_count += 1
    return vowel_count

count_vowels("Hello, World!")

# 19. Write a program that takes a number and determines if it's even or odd using the modulus operator %,

def check_even_odd(number):
    if number % 2 == 0:
        return "Even"
    else:
        return "Odd"

# Example usage
number = 10
result = check_even_odd(number)
print(f"The number {number} is {result}")

number = 7
result = check_even_odd(number)
print(f"The number {number} is {result}")

# 20. Write a program to check whether a person can vote (age >= 18) using logical operators,

def check_vote_eligibility(age):
    return age >= 18

# Example usage
age = 20
if check_vote_eligibility(age):
    print("This person can vote.")
else:
    print("This person cannot vote.")

age = 15
if check_vote_eligibility(age):
    print("This person can vote.")
else:
    print("This person cannot vote.")

# 21. Write a program to yield positive number from the given listing using python generator,"nums = [-3, -2, 0, 1, 2, 4, 5, 7]"

def positive_numbers(nums):
    for num in nums:
        if num > 0:
            yield num

nums = [-3, -2, 0, 1, 2, 4, 5, 7]
for num in positive_numbers(nums):
  print(num)

# 22. Write a function name 'welcome' that prints a welcome message for the user using default argument,if user name provided that shoult print user name, otherwise default name should be printed

def welcome(user_name="Guest"):
  print(f"Welcome, {user_name}!")

welcome("Python")

#23. Write a function sum_all(*args) that accepts any number of numeric arguments and returns their sum.,"sum_all(1, 2, 3)"

def sum_all(*args):

  total = 0
  for num in args:
    total += num
  return total

sum_all(1, 2, 3)

# 24. Write a function print_user_info(**kwargs) that accepts any number of keyword arguments and prints them in key: value format.,"print_user_info(name=""Alice"", age=25, city=""NYC"")"

def print_user_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print_user_info(name="Alice", age=25, city="NYC")

# 25. Scopes - local & global:You have a global variable visits initialized to 0.Write a function track_visit(page) that:Increments the global visits by 1 each time it’s called.Creates a local variable called message like: ""User visited {page}. Total visits: {visits}""Prints the message.","Expected Behavior:visits = 0
# track_visit(""Home"")     # ➞ User visited Home. Total visits: 1
# track_visit(""About"")    # ➞ User visited About. Total visits: 2
# print(visits)           # ➞ 2

visits = 0

def track_visit(page):
    global visits
    visits += 1
    message = f"User visited {page}. Total visits: {visits}"
    print(message)

track_visit("Home")     # ➞ User visited Home. Total visits: 1
track_visit("About")    # ➞ User visited About. Total visits: 2
print(visits)           # ➞ 2